name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 1.0.0)"
        required: true
        type: string

permissions:
  contents: write
  id-token: write

jobs:
  test-before-release:
    name: Test Before Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libmagic1

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run tests
        run: |
          pytest tests/ --cov=fft --cov-fail-under=90 -v

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: test-before-release

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build distribution
        run: |
          python -m build

      - name: Check distribution
        run: |
          twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-packages
          path: dist/
          retention-days: 7

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-packages
          path: dist/

      - name: Extract version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Create a simple changelog from git log
          if git tag --list | grep -q "v"; then
            PREV_TAG=$(git tag --list "v*" --sort=-version:refname | head -2 | tail -1)
            if [ ! -z "$PREV_TAG" ]; then
              echo "## Changes since $PREV_TAG" > CHANGELOG.md
              git log $PREV_TAG..HEAD --pretty=format:"- %s" >> CHANGELOG.md
            else
              echo "## Initial Release" > CHANGELOG.md
              echo "First release of Find File Type CLI tool." >> CHANGELOG.md
            fi
          else
            echo "## Initial Release" > CHANGELOG.md
            echo "First release of Find File Type CLI tool." >> CHANGELOG.md
          fi

          echo "## Features" >> CHANGELOG.md
          echo "- File type detection using filesystem, magic, and language tests" >> CHANGELOG.md
          echo "- Support for 48+ file types across multiple categories" >> CHANGELOG.md
          echo "- Command-line interface with extensive options" >> CHANGELOG.md
          echo "- Python API for programmatic use" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## Installation" >> CHANGELOG.md
          echo "\`\`\`bash" >> CHANGELOG.md
          echo "pip install find-file-type" >> CHANGELOG.md
          echo "\`\`\`" >> CHANGELOG.md

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          release_name: Release ${{ steps.version.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for file in dist/*; do
            echo "Uploading $file"
            gh release upload ${{ steps.version.outputs.tag }} "$file"
          done

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build, create-release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-packages
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true

  publish-test-pypi:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch'

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-packages
          path: dist/

      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          print-hash: true

  post-release:
    name: Post Release Tasks
    runs-on: ubuntu-latest
    needs: [create-release, publish-pypi]
    if: always()

    steps:
      - uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create post-release issue
        uses: actions/github-script@v6
        with:
          script: |
            const version = '${{ steps.version.outputs.version }}';
            const body = `
            ## Post-Release Checklist for v${version}

            - [ ] Verify PyPI package installation: \`pip install find-file-type==${version}\`
            - [ ] Test CLI functionality: \`fft --version\`
            - [ ] Update documentation if needed
            - [ ] Announce release in relevant channels
            - [ ] Monitor for issues in the next 24 hours
            - [ ] Update any dependent projects

            ## Package Links
            - [PyPI Package](https://pypi.org/project/find-file-type/${version}/)
            - [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/v${version})

            Auto-generated after release v${version}
            `;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Post-Release Tasks: v${version}`,
              body: body,
              labels: ['release', 'maintenance']
            });

  notification:
    name: Release Notification
    runs-on: ubuntu-latest
    needs: [create-release, publish-pypi]
    if: always()

    steps:
      - name: Extract version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Release Success Notification
        if: needs.create-release.result == 'success' && needs.publish-pypi.result == 'success'
        run: |
          echo "🎉 Successfully released v${{ steps.version.outputs.version }}"
          echo "📦 Package available at: https://pypi.org/project/find-file-type/${{ steps.version.outputs.version }}/"
          echo "📋 Release notes: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.version }}"

      - name: Release Failure Notification
        if: needs.create-release.result == 'failure' || needs.publish-pypi.result == 'failure'
        run: |
          echo "❌ Release v${{ steps.version.outputs.version }} failed"
          echo "Check the workflow logs for details"
          exit 1
