name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libmagic1

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run pre-commit hooks
        run: |
          pre-commit run --all-files

      - name: Run type checking
        run: |
          mypy src/fft --config-file pyproject.toml

      - name: Run security checks
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ -f txt

      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-report-${{ matrix.python-version }}
          path: bandit-report.json

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libmagic1

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run tests with coverage
        run: |
          pytest tests/ \
            --cov=fft \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --cov-fail-under=90 \
            --junitxml=pytest-report.xml \
            -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.python-version == '3.11'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            pytest-report.xml
            htmlcov/
            coverage.xml

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [code-quality, test]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libmagic1

      - name: Install package
        run: |
          python -m pip install --upgrade pip
          pip install -e .

      - name: Test CLI installation
        run: |
          fft --version
          fft --help

      - name: Test CLI functionality
        run: |
          # Create test files
          echo "#!/usr/bin/env python3" > test_script.py
          echo "print('Hello, World!')" >> test_script.py
          echo '{"name": "test"}' > test_data.json
          echo "Testing CLI" > test_readme.txt

          # Test basic functionality
          fft test_script.py | grep -q "Python source"
          fft test_data.json | grep -q "JSON data"
          fft test_readme.txt | grep -q "Text file"

          # Test with options
          fft --verbose test_script.py
          fft --quiet test_data.json
          fft --filter-type PYTHON test_script.py

          # Test directory scanning
          fft .

          # Cleanup
          rm -f test_script.py test_data.json test_readme.txt

      - name: Test package import
        run: |
          python -c "
          from fft import FileTypeDetector, FileType, DetectionResult
          from fft.detector import FileTypeDetector as FTD
          from fft.types import FileType as FT, DetectionMethod
          print('All imports successful')
          "

  compatibility-test:
    name: OS Compatibility Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.11"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libmagic1

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install libmagic

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .

      - name: Basic functionality test
        run: |
          python -c "
          from fft import FileTypeDetector
          import tempfile
          import os

          # Create temp file
          with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:
              f.write('print(\"hello\")')
              temp_file = f.name

          try:
              detector = FileTypeDetector()
              result = detector.detect_file_type(temp_file)
              print(f'Detected: {result.file_type}')
              assert result.file_type.value in ['Python source', 'Text file']
          finally:
              os.unlink(temp_file)
          "

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install safety

      - name: Run safety check
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: safety-report
          path: safety-report.json

  build-test:
    name: Build and Distribution Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Check distribution
        run: |
          twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-packages
          path: dist/

  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Check README
        run: |
          python -c "
          import sys
          try:
              with open('README.md', 'r') as f:
                  content = f.read()
              assert len(content) > 100, 'README too short'
              assert 'installation' in content.lower(), 'No installation section'
              assert 'usage' in content.lower(), 'No usage section'
              print('README check passed')
          except Exception as e:
              print(f'README check failed: {e}')
              sys.exit(1)
          "

      - name: Check package metadata
        run: |
          python -c "
          import sys
          try:
              from fft import __version__
              assert __version__, 'No version found'
              print(f'Version: {__version__}')
          except ImportError:
              print('Could not import version')
              sys.exit(1)
          "

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs:
      [
        code-quality,
        test,
        integration-test,
        compatibility-test,
        dependency-check,
        build-test,
        documentation-check,
      ]
    if: always()

    steps:
      - name: Check all jobs status
        run: |
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Integration Tests: ${{ needs.integration-test.result }}"
          echo "Compatibility Tests: ${{ needs.compatibility-test.result }}"
          echo "Dependency Check: ${{ needs.dependency-check.result }}"
          echo "Build Test: ${{ needs.build-test.result }}"
          echo "Documentation Check: ${{ needs.documentation-check.result }}"

          # Check if any required job failed
          if [[ "${{ needs.code-quality.result }}" == "failure" ||
                "${{ needs.test.result }}" == "failure" ||
                "${{ needs.integration-test.result }}" == "failure" ]]; then
            echo "❌ Critical jobs failed"
            exit 1
          else
            echo "✅ All critical jobs passed"
          fi
